name: "Destory Test Environment"

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  destroy-terraform:
    name: Destroy Test Environment
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

        # Get the first 6 characters from hash of branch name to use as identifier
      - name: Extract Branch Hash (Non-PR)
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_HASH=$(echo "$GITHUB_REF#refs/heads/" | sha256sum | cut -c1-6)" >> $GITHUB_ENV

      - name: Extract Branch Hash
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_HASH=$(echo "$GITHUB_SHA" | sha256sum | cut -c1-6)" >> $GITHUB_ENV

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Select branch workspace
      - name: Terraform Workspace
        run: terraform workspace select $BRANCH_HASH

      # Destroy the workspace
      - name: Terraform Destory
        run: terraform destroy -auto-approve

      # Select default workspace
      - name: Terraform Workspace
        run: terraform workspace select default

      # Delete branch workspace
      - name: Terraform Workspace
        run: terraform workspace delete $BRANCH_HASH
