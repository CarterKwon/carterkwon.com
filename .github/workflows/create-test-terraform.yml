name: 'Create Terraform Test Environment'

on:
  push:
    branches-ignore:
    - main

jobs:
  create-infrastructure:
    name: Create test environment
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: 'us-east-1'    
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

      # Set branch name to an env var
    - name: Extract Branch Name (Non-PR)
      if: github.event_name != 'pull_request'
      run: echo "BRANCH_NAME=$(echo "$GITHUB_REF#refs/heads/" | sha256sum | cut -c1-6)" >> $GITHUB_ENV

    - name: Extract Branch Name Hash
      if: github.event_name == 'pull_request'
      run: echo "BRANCH_HASH=$(echo "$GITHUB_SHA" | sha256sum | cut -c1-6)" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Configure workspace
    - name: Terraform Workspace
      run: terraform workspace select $BRANCH_HASH || terraform workspace new $BRANCH_HASH
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -no-color

    # Apply the terraform code
    - name: Terraform Apply
      run: terraform apply -auto-approve